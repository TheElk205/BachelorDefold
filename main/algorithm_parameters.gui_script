local gooey = require "gooey.gooey"
local kenneyblue = require "gooey-kenney.kenneyblue"
local camera = require "orthographic.camera"

local parameters = {
	-- general
	["speed"] = {
		["value"] = 60
	},
	["turning_factor"] = {
		["value"] = 0.1
	},
	["boids"] = {
		-- boids
		["cohesion"] = {
			["value"] = 0.1
		},
		["separation"] = {
			["value"] = 0.3
		},
		["alignment"] = {
			["value"] = 0.2
		}
	},
	-- beeclust
	["beeclust"] = {
		["waiting"] = {
			["hit_distance"] = 1,
			["max_wait_time"] = 5,
			["time_offset"] = 3,
			["enabled"] = false
		},
		["random_walk"] = {
			["max_angle"] = 45,
			["enabled"] = false
		}
	}
}

local settings_open = true
local settings_panel = nil

function init(self)
	gooey.acquire_input()
	self.objects = {}
	print(camera.get_zoom(nil))
	-- camera.set_zoom(nil, 100)
	-- print(camera.get_zoom(nil))
	settings_panel = gui.get_node("settings_panel")
	if not settings_open then
		gui.set_position(settings_panel, position)
	end

	self.boids = {
		["cohesion"] = nil,
		["cohesion_checkbox"] = nil,
		["separation"] = nil,
		["separation_checkbox"] = nil,
		["alignment"] = nil,
		["alignment_checkbox"] = nil
	}

	self.beeclust = {
		["hit_distance"] = nil,
		["max_wait_time"] = nil,
		["time_offset"] = nil,
		["waiting_checkbox"] = nil,
		["max_angle"] = nil,
		["random_walk_checkbox"] = nil
	}
end

function on_input(self, action_id, action)
	local group = kenneyblue.group("group1", function()
		kenneyblue.button("button_apply", action_id, action, function(button)
			print("Applying new parameters")
			parameters = {
				-- general
				["speed"] = {
					["value"] = self.speed["empty"] and parameters["speed"]["value"] or self.speed["text"]
				},
				["turning_factor"] = {
					["value"] = self.turning_factor["empty"] and parameters["turning_factor"]["value"] or self.turning_factor["text"]
				},
				-- boids
				["boids"] = {
					["cohesion"] = {
						["value"] = self.boids["cohesion"]["empty"] and parameters["boids"]["cohesion"]["value"] or self.boids["cohesion"]["text"],
						["enabled"] = self.boids["cohesion_checkbox"]["checked"]
					},
					["separation"] = {
						["value"] = self.boids["separation"]["empty"] and parameters["boids"]["separation"]["value"] or self.boids["separation"]["text"],
						["enabled"] = self.boids["separation_checkbox"]["checked"]
					},["alignment"] = {
						["value"] = self.boids["alignment"]["empty"] and parameters["boids"]["alignment"]["value"] or self.boids["alignment"]["text"],
						["enabled"] = self.boids["alignment_checkbox"]["checked"]
					}
				},
				-- boids
				["beeclust"] = {
					["waiting"] = {
						["hit_distance"] = self.beeclust["hit_distance"]["empty"] and parameters["beeclust"]["waiting"]["hit_distance"] or self.beeclust["hit_distance"]["text"],
						["max_wait_time"] = self.beeclust["max_wait_time"]["empty"] and parameters["beeclust"]["waiting"]["max_wait_time"] or self.beeclust["max_wait_time"]["text"],
						["time_offset"] = self.beeclust["time_offset"]["empty"] and parameters["beeclust"]["waiting"]["time_offset"] or self.beeclust["time_offset"]["text"],
						["enabled"] = self.beeclust["waiting_checkbox"]["checked"]
					},
					["random_walk"] = {
						["max_angle"] = self.beeclust["max_angle"]["empty"] and parameters["beeclust"]["random_walk"]["max_angle"] or self.beeclust["max_angle"]["text"],
						["enabled"] = self.beeclust["random_walk_checkbox"]["checked"]
					}
				}
			}

			print("New Parameters: ")
			for k, v in pairs(self.objects) do
				msg.post(v, "new_parameters", parameters)
			end
		end)

		kenneyblue.button("button_open_close", action_id, action, function(button)
			print("Open / close")
			move_settings_panel(settings_open)
		end)

		-- general
		self.speed = kenneyblue.input("input_speed", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["speed"]["value"], max_length = 8, allowed_characters = "[%d.]" })
		self.turning_factor = kenneyblue.input("input_turning_factor", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["turning_factor"]["value"], max_length = 8, allowed_characters = "[%d.]" })

		-- boids
		self.boids["cohesion"] = kenneyblue.input("input_cohesion", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["boids"]["cohesion"]["value"], max_length = 8, allowed_characters = "[%d.]" })
		self.boids["cohesion_checkbox"] = kenneyblue.checkbox("checkbox_cohesion", action_id, action)
		self.boids["separation"] = kenneyblue.input("input_separation", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["boids"]["separation"]["value"], max_length = 8, allowed_characters = "[%d.]" })
		self.boids["separation_checkbox"] = kenneyblue.checkbox("checkbox_separation", action_id, action)
		self.boids["alignment"] = kenneyblue.input("input_alignment", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["boids"]["alignment"]["value"], max_length = 8, allowed_characters = "[%d.]" })
		self.boids["alignment_checkbox"] = kenneyblue.checkbox("checkbox_alignment", action_id, action)

		-- beeclust
		self.beeclust["hit_distance"] = kenneyblue.input("input_hit_distance", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["beeclust"]["waiting"]["hit_distance"], max_length = 8, allowed_characters = "[%d.]" })
		self.beeclust["max_wait_time"] = kenneyblue.input("input_max_wait_time", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["beeclust"]["waiting"]["max_wait_time"], max_length = 8, allowed_characters = "[%d.]" })
		self.beeclust["time_offset"] = kenneyblue.input("input_time_offset", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["beeclust"]["waiting"]["time_offset"], max_length = 8, allowed_characters = "[%d.]" })
		self.beeclust["waiting_checkbox"] = kenneyblue.checkbox("checkbox_wait_bee_hit", action_id, action)
		self.beeclust["max_angle"] = kenneyblue.input("input_max_angle", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = parameters["beeclust"]["random_walk"]["max_angle"], max_length = 8, allowed_characters = "[%d.]" })
		self.beeclust["random_walk_checkbox"] = kenneyblue.checkbox("checkbox_random_walk", action_id, action)
		
	end)
	return group.consumed
end

function move_settings_panel(hide)
	if hide then
		gui.animate(settings_panel, "position.y", -200, gui.EASING_OUTBOUNCE, 1)
	else
		gui.animate(settings_panel, "position.y", 200, gui.EASING_OUTBOUNCE, 1)
	end
	settings_open = not settings_open
end
function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("report_in") then
		table.insert(self.objects, sender)
	end
end